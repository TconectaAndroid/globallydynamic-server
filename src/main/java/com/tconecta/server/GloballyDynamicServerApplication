package com.tconecta.server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.beans.factory.annotation.Value;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@SpringBootApplication
@RestController
@CrossOrigin(origins = "*")
public class GloballyDynamicServerApplication {

    private final OkHttpClient httpClient = new OkHttpClient();

    @Value("${netlify.base.url:https://tconectahost.netlify.app}")
    private String netlifyBaseUrl;

    public static void main(String[] args) {
        System.out.println("=== Iniciando GloballyDynamic Server para TConecta ===");
        SpringApplication.run(GloballyDynamicServerApplication.class, args);
    }

    @GetMapping("/")
    public ResponseEntity<String> home() {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        String response = String.format("""
            {
                "service": "GloballyDynamic Server",
                "status": "running",
                "version": "1.0.0",
                "timestamp": "%s",
                "endpoints": {
                    "health": "/actuator/health",
                    "modules_metadata": "/api/v1/modules/metadata",
                    "download_module": "/api/v1/modules/download?name=MODULE_NAME"
                }
            }
            """, timestamp);
        
        return ResponseEntity.ok()
            .header(HttpHeaders.CONTENT_TYPE, "application/json")
            .body(response);
    }

    // Endpoint principal para GloballyDynamic - Metadata de módulos
    @GetMapping("/api/v1/modules/metadata")
    public ResponseEntity<String> getModulesMetadata() {
        System.out.println("=== Solicitando metadata de módulos ===");
        
        try {
            String url = netlifyBaseUrl + "/modules/manifest.json";
            System.out.println("Obteniendo metadata desde: " + url);
            
            Request request = new Request.Builder()
                .url(url)
                .addHeader("Accept", "application/json")
                .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (response.isSuccessful() && response.body() != null) {
                    String jsonResponse = response.body().string();
                    System.out.println("✓ Metadata obtenida exitosamente");
                    
                    return ResponseEntity.ok()
                        .header(HttpHeaders.CONTENT_TYPE, "application/json")
                        .header(HttpHeaders.CACHE_CONTROL, "no-cache")
                        .body(jsonResponse);
                } else {
                    System.err.println("❌ Error al obtener metadata: " + response.code());
                    return getFallbackMetadata();
                }
            }
        } catch (Exception e) {
            System.err.println("❌ Excepción al obtener metadata: " + e.getMessage());
            e.printStackTrace();
            return getFallbackMetadata();
        }
    }

    // Endpoint para descargar módulos
    @GetMapping("/api/v1/modules/download")
    public ResponseEntity<ByteArrayResource> downloadModule(@RequestParam String name) {
        System.out.println("=== Descargando módulo: " + name + " ===");
        
        try {
            String moduleUrl = netlifyBaseUrl + "/modules/" + name + "-debug.apk";
            System.out.println("URL del módulo: " + moduleUrl);
            
            Request request = new Request.Builder()
                .url(moduleUrl)
                .addHeader("Accept", "application/vnd.android.package-archive")
                .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (response.isSuccessful() && response.body() != null) {
                    byte[] data = response.body().bytes();
                    System.out.println("✓ Módulo descargado exitosamente. Tamaño: " + data.length + " bytes");
                    
                    ByteArrayResource resource = new ByteArrayResource(data);
                    
                    HttpHeaders headers = new HttpHeaders();
                    headers.add(HttpHeaders.CONTENT_DISPOSITION, 
                        "attachment; filename=" + name + "-debug.apk");
                    headers.add(HttpHeaders.CONTENT_TYPE, 
                        "application/vnd.android.package-archive");
                    headers.add(HttpHeaders.CACHE_CONTROL, "public, max-age=3600");

                    return ResponseEntity.ok()
                        .headers(headers)
                        .contentLength(data.length)
                        .body(resource);
                } else {
                    System.err.println("❌ Error al descargar módulo: " + response.code());
                    return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new ByteArrayResource("Module not found".getBytes()));
                }
            }
        } catch (IOException e) {
            System.err.println("❌ Error de IO al descargar módulo: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ByteArrayResource("Download failed".getBytes()));
        } catch (Exception e) {
            System.err.println("❌ Error general al descargar módulo: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ByteArrayResource("Internal server error".getBytes()));
        }
    }

    // Endpoint para verificar módulos disponibles
    @GetMapping("/api/v1/modules/list")
    public ResponseEntity<String> listAvailableModules() {
        System.out.println("=== Listando módulos disponibles ===");
        
        String response = """
            {
                "available_modules": [
                    {
                        "name": "extension_pagos_servicios",
                        "status": "available",
                        "download_url": "/api/v1/modules/download?name=extension_pagos_servicios"
                    }
                ],
                "total_count": 1
            }
            """;
        
        return ResponseEntity.ok()
            .header(HttpHeaders.CONTENT_TYPE, "application/json")
            .body(response);
    }

    // Endpoint de health check personalizado
    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        try {
            // Verificar conectividad con Netlify
            String testUrl = netlifyBaseUrl + "/modules/manifest.json";
            Request request = new Request.Builder()
                .url(testUrl)
                .head() // Solo HEAD request para verificar conectividad
                .build();

            try (Response response = httpClient.newCall(request).execute()) {
                boolean netlifyHealthy = response.isSuccessful();
                
                String healthResponse = String.format("""
                    {
                        "status": "UP",
                        "timestamp": "%s",
                        "services": {
                            "server": "UP",
                            "netlify_connection": "%s"
                        },
                        "version": "1.0.0"
                    }
                    """, 
                    LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),
                    netlifyHealthy ? "UP" : "DOWN"
                );
                
                return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_TYPE, "application/json")
                    .body(healthResponse);
            }
        } catch (Exception e) {
            String healthResponse = String.format("""
                {
                    "status": "UP",
                    "timestamp": "%s",
                    "services": {
                        "server": "UP",
                        "netlify_connection": "DOWN"
                    },
                    "version": "1.0.0",
                    "error": "%s"
                }
                """, 
                LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),
                e.getMessage()
            );
            
            return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_TYPE, "application/json")
                .body(healthResponse);
        }
    }

    private ResponseEntity<String> getFallbackMetadata() {
        System.out.println("⚠️ Usando metadata de fallback");
        
        String fallbackResponse = """
            {
                "version": 1,
                "modules": [
                    {
                        "name": "extension_pagos_servicios",
                        "version": 1,
                        "url": "/api/v1/modules/download?name=extension_pagos_servicios",
                        "size": 425984,
                        "description": "Módulo dinámico con funcionalidades adicionales",
                        "minAppVersion": 1
                    }
                ]
            }
            """;
        
        return ResponseEntity.ok()
            .header(HttpHeaders.CONTENT_TYPE, "application/json")
            .header("X-Fallback", "true")
            .body(fallbackResponse);
    }
}